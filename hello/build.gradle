import org.gradle.internal.jvm.Jvm

plugins {
  id 'idea'
  id 'cpp-library'
  id 'org.platops.gradle.plugins.qt.gradle-qt-plugin' version '1.0.4'
}

model {
  buildTypes {
    debug
    release
  }
}

qt {
  modules = [
      'QtCore',
  ]

  deployParameters = [
    windows: [
      '--no-system-d3d-compiler',
      '--no-webkit2',
    ],
    macos: [
      '-no-strip'
    ]
  ]
}


library {

  source.from file('src/main/cpp')
  privateHeaders.from file('src/main/headers')

  binaries.configureEach { CppBinary cppBinary ->
    CppCompile compileTask = cppBinary.compileTask.get()
    AbstractLinkTask linkTask = cppBinary.linkTask.get()

        compileTask.includes.from("${Jvm.current().javaHome}/include")

        def osFamily = cppBinary.targetPlatform.targetMachine.operatingSystemFamily
        if (osFamily.macOs) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/darwin")
        } else if (osFamily.linux) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/linux")
        } else if (osFamily.windows) {
            compileTask.includes.from("${Jvm.current().javaHome}/include/win32")
        }



    compileTask.positionIndependentCode = true

    if (compileTask.targetPlatform.get().operatingSystem.isMacOsX()) {
      compileTask.compilerArgs.add('-std=gnu++11')
    }
    if (compileTask.targetPlatform.get().operatingSystem.isWindows()) {
      compileTask.compilerArgs.add("/MD${compileTask.name.toLowerCase().contains('debug') ? 'd' : ''}")
      linkTask.linkerArgs.addAll(['user32.lib', 'ole32.lib','shell32.lib','pdh.lib','windowscodecs.lib'])
    }

    if (compileTask.name.toLowerCase().contains('debug')) {
      compileTask.macros.put('_DEBUG', null)
      compileTask.optimized = false
      compileTask.debuggable = true
    } else {
      compileTask.macros.put('NDEBUG', null)
      compileTask.optimized = true
      compileTask.debuggable = false
    }

    linkTask.debuggable = linkTask.name.toLowerCase().contains('debug')
  }
}
